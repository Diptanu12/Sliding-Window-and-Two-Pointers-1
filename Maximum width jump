Maximum width jump
A ramp in an integer array nums is a pair (i, j) for which i < j and nums[i] <= nums[j]. The width of such a ramp is j - i.

Given an integer array nums, return the maximum width of a ramp in nums. If there is no ramp in nums, return 0.

Input Format
The first line of input contains a single integer n.

The second line of input contains n space seperated integers.

Output Format
Return the maximum width of the ramp, if there does not exist any ramp return 0.

Example 1
Input

6
6 0 8 2 1 5
Output

4
Explanation

The maximum width ramp is achieved at (i, j) = (1, 5): nums[1] = 0 and nums[5] = 5.

Example 2
Input

10
9 8 1 0 1 9 4 0 4 1
Output

7
Explanation

The maximum width ramp is achieved at (i, j) = (2, 9): nums[2] = 1 and nums[9] = 1.

Constraints
2 <= n <= 5*104

0 <= nums[i] <= 5*104

Topics
Stacks
Binary Search


import java.util.*;

class Solution {

    public int solve(int nums[],int n) {
        // Your code here
        int right[]=new int[n];

        right[n-1]=nums[n-1];
        for(int i=n-2; i>=0;i--){
            right[i]=Math.max(right[i+1], nums[i]);
        }
        int i=0,j=1, ans=0;
        while(j<n){
            while(i<j && nums[i]>right[j]){
                i++;
            }
             ans=Math.max(ans, j-i);
            j++;
        }
        return ans;
    }
}

class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int nums[]=new int[n];
        for(int i=0;i<n;i++)
        nums[i]=sc.nextInt();

        Solution obj=new Solution();
        System.out.println(obj.solve(nums,n));
        sc.close();
    }
}
