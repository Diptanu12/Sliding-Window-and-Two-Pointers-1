4Sum
Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target

You may return the answer in any order.

NOTE: You just have to complete the given function.

Expected time Complexity: O(N^3)

Input Format
First line contains the size of the array n.

second line will contain n space separated integers.

third line contains the target

Output Format
Return all the required unique quadruplets.

Example 1
Input

6
1 0 -1 0 -2 2 
0
Output

-2 -1 1 2
-2 0 0 2
-1 0 0 1
Explanation

There are three unique required quadruplets.

Example 2
Input

5
2 2 2 2 2
8
Output

2 2 2 2
Explanation

There is only one unique required quadruplets.

Constraints
1 <= nums.length <= 200

-10^9 <= nums[i] <= 10^9

-10^9 <= target <= 10^9

Topics
2-Pointers
Sorting
Arrays



import java.util.*;

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> result = new ArrayList<>();
        if (nums == null || nums.length < 4) {
            return result;
        }
        
        Arrays.sort(nums);  
        int n = nums.length;

        for (int i = 0; i < n - 3; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;  
            }
            for (int j = i + 1; j < n - 2; j++) {
                if (j > i + 1 && nums[j] == nums[j - 1]) {
                    continue;  
                }
                int left = j + 1;
                int right = n - 1;
                
                while (left < right) {
                    int sum = nums[i] + nums[j] + nums[left] + nums[right];
                    if (sum == target) {
                        result.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));
                        while (left < right && nums[left] == nums[left + 1]) {
                            left++;  // Skip duplicate elements
                        }
                        while (left < right && nums[right] == nums[right - 1]) {
                            right--;  // Skip duplicate elements
                        }
                        left++;
                        right--;
                    } else if (sum < target) {
                        left++;
                    } else {
                        right--;
                    }
                }
            }
        }
        
        return result;
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = sc.nextInt();
        }
        int target = sc.nextInt();
        Solution solution = new Solution();
        List<List<Integer>> result = solution.fourSum(nums, target);

        for (int i = 0; i < result.size(); i++) {
            Collections.sort(result.get(i));
        }

        Collections.sort(result, new Comparator<List<Integer>>() {
            public int compare(List<Integer> first, List<Integer> second) {
                int i = 0;
                while (first.get(i).equals(second.get(i))) {
                    i++;
                }
                return first.get(i) - second.get(i);
            }
        });

        for (List<Integer> quadruplet : result) {
            for (int num : quadruplet) {
                System.out.print(num + " ");
            }
            System.out.println();
        }
        sc.close();
    }
}
